import itertools
import sympy as sp

# Lagrange Interpolation Function
def lagrange_interpolation(x_values, y_values):
    x = sp.symbols('x')
    n = len(x_values)
    polynomial = 0
    for i in range(n):
        term = y_values[i]
        for j in range(n):
            if i != j:
                term *= (x - x_values[j]) / (x_values[i] - x_values[j])
        polynomial += term
    return sp.simplify(polynomial)

# Function to decode y values from various bases
def decode_y_value(base, value):
    return int(value, base)

# Check if a point is on the polynomial
def is_point_on_polynomial(polynomial, x_val, y_val):
    return polynomial.subs(sp.symbols('x'), x_val) == y_val

# Input Data (second test case)
test_case = {
    "keys": {"n": 9, "k": 6},
    "1": {"base": "10", "value": "28735619723837"},
    "2": {"base": "16", "value": "1A228867F0CA"},
    "3": {"base": "12", "value": "32811A4AA0B7B"},
    "4": {"base": "11", "value": "917978721331A"},
    "5": {"base": "16", "value": "1A22886782E1"},
    "6": {"base": "10", "value": "28735619654702"},
    "7": {"base": "14", "value": "71AB5070CC4B"},
    "8": {"base": "9", "value": "122662581541670"},
    "9": {"base": "8", "value": "642121030037605"}
}

# Step 1: Parse and decode all (x, y) pairs
points = []
for key in test_case:
    if key != 'keys':
        x_val = int(key)
        base = int(test_case[key]['base'])
        y_val = decode_y_value(base, test_case[key]['value'])
        points.append((x_val, y_val))

# Step 2: Try different combinations of 6 points and find the polynomial
x_values = [point[0] for point in points]
y_values = [point[1] for point in points]

# Find all combinations of 6 points
combinations = itertools.combinations(points, 6)

# Step 3: Check each combination of 6 points
for combo in combinations:
    x_combo = [x for x, y in combo]
    y_combo = [y for x, y in combo]

    # Find the polynomial for this combination
    polynomial = lagrange_interpolation(x_combo, y_combo)

    # Check if the polynomial satisfies all the points
    incorrect_points = []
    for x_val, y_val in points:
        if not is_point_on_polynomial(polynomial, x_val, y_val):
            incorrect_points.append((x_val, y_val))

    # If we found incorrect points, break and print the result
    if len(incorrect_points) <= 3:
        print("Incorrect points:", incorrect_points)
        print("Polynomial:", polynomial)
        break
